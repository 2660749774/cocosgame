--------------------------------------------------------------
-- This file was automatically generated by Cocos Studio.
-- Do not make changes to this file.
-- All changes will be lost.
--------------------------------------------------------------

local luaExtend = require "LuaExtend"

-- using for layout to decrease count of local variables
local layout = nil
local localLuaFile = nil
local innerCSD = nil
local innerProject = nil
local localFrame = nil

local Result = {}
------------------------------------------------------------
-- function call description
-- create function caller should provide a function to 
-- get a callback function in creating scene process.
-- the returned callback function will be registered to 
-- the callback event of the control.
-- the function provider is as below :
-- Callback callBackProvider(luaFileName, node, callbackName)
-- parameter description:
-- luaFileName  : a string, lua file name
-- node         : a Node, event source
-- callbackName : a string, callback function name
-- the return value is a callback function
------------------------------------------------------------
function Result.create(callBackProvider)

local result={}
setmetatable(result, luaExtend)

--Create Layer
local Layer=cc.Node:create()
Layer:setName("Layer")
--layout:setSize(cc.size(1136.0000, 640.0000))

--Create bg
local bg = ccui.ImageView:create()
bg:ignoreContentAdaptWithSize(false)
cc.SpriteFrameCache:getInstance():addSpriteFrames("pack.plist")
bg:loadTexture("MainSceneBg.jpg",1)
bg:setLayoutComponentEnabled(true)
bg:setName("bg")
bg:setTag(5)
bg:setCascadeColorEnabled(true)
bg:setCascadeOpacityEnabled(true)
bg:setPosition(568.0010, 320.0001)
layout = ccui.LayoutComponent:bindLayoutComponent(bg)
layout:setPositionPercentX(0.5000)
layout:setPositionPercentY(0.5000)
layout:setPercentWidth(1.0000)
layout:setPercentHeight(1.0000)
layout:setSize(cc.size(1136.0000, 640.0000))
layout:setLeftMargin(0.0010)
layout:setRightMargin(-0.0010)
layout:setTopMargin(-0.0001)
layout:setBottomMargin(0.0001)
Layer:addChild(bg)

--Create btn_play
local btn_play = ccui.Button:create()
btn_play:ignoreContentAdaptWithSize(false)
btn_play:loadTextureNormal("PlayButton.png",1)
btn_play:loadTexturePressed("PlayButton.png",1)
btn_play:loadTextureDisabled("PlayButton.png",1)
btn_play:setTitleFontSize(14)
btn_play:setTitleColor(cc.c3b(65, 65, 70))
btn_play:setScale9Enabled(true)
btn_play:setCapInsets(cc.rect(15,11,210,98))
btn_play:setLayoutComponentEnabled(true)
btn_play:setName("btn_play")
btn_play:setTag(7)
btn_play:setCascadeColorEnabled(true)
btn_play:setCascadeOpacityEnabled(true)
btn_play:setPosition(568.0000, 130.0000)
if callBackProvider~=nil then
      btn_play:addClickEventListener(callBackProvider("MainLayout.lua", btn_play, "onClicked"))
end
layout = ccui.LayoutComponent:bindLayoutComponent(btn_play)
layout:setPositionPercentX(0.5000)
layout:setPositionPercentY(0.2031)
layout:setPercentWidth(0.2113)
layout:setPercentHeight(0.1875)
layout:setSize(cc.size(240.0000, 120.0000))
layout:setLeftMargin(448.0000)
layout:setRightMargin(448.0000)
layout:setTopMargin(450.0000)
layout:setBottomMargin(70.0000)
Layer:addChild(btn_play)

--Create Animation
result['animation'] = ccs.ActionTimeline:create()
  
result['animation']:setDuration(0)
result['animation']:setTimeSpeed(1.0000)
--Create Animation List

result['root'] = Layer
return result;
end

return Result

